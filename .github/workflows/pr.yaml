name: WASM Build & Tests
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  wasm_build:
    name: Build Project for WASM target
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build .env file
        uses: ./.github/actions/setup_env
        with:
          infura_api_key: ${{ secrets.INFURA_API_KEY }}
          nhost_region: ${{ secrets.NHOST_REGION }}
          nhost_subdomain: ${{ secrets.NHOST_SUBDOMAIN }}

      - name: Install Rust toolchain
        run: |
          rustup toolchain install 1.79 --profile minimal --target wasm32-unknown-unknown
          rustup target add wasm32-unknown-unknown
          echo "RUST_VERSION_HASH=$(rustc --version | sha256sum | awk '{print $1}')" >> $GITHUB_ENV

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            ./target/wasm32-unknown-unknown/release/
          key: ${{ runner.os }}-rust-${{ env.RUST_VERSION_HASH }}-cargo-${{ hashFiles('./Cargo.lock') }}-${{ github.run_id }}

      - name: Build WASM for txtx-core
        run: cargo build --package txtx-core --release --locked --target wasm32-unknown-unknown --features wasm --no-default-features

      - name: Build WASM for txtx-addon-kit
        run: cargo build --package txtx-addon-kit --release --locked --target wasm32-unknown-unknown --features wasm --no-default-features

  tests:
    name: Run Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: txtx

      - name: Build .env file
        uses: ./txtx/.github/actions/setup_env
        with:
          infura_api_key: ${{ secrets.INFURA_API_KEY }}
          nhost_region: ${{ secrets.NHOST_REGION }}
          nhost_subdomain: ${{ secrets.NHOST_SUBDOMAIN }}
          working_directory: "txtx"
          
      - name: Checkout Supervisor UI
        uses: actions/checkout@v4
        with:
          repository: txtx/txtx-supervisor-ui
          token: ${{ secrets.TXTX_ACCESS_TOKEN }} 
          path: txtx-supervisor-ui 

      - name: Build .env file for Supervisor UI
        uses: ./txtx/.github/actions/setup_supervisor_env
        with:
          txtx_dev_npm_read_token: ${{ secrets.TXTX_DEV_NPM_READ_TOKEN }}
          nhost_region: ${{ secrets.NHOST_REGION }}
          nhost_subdomain: ${{ secrets.NHOST_SUBDOMAIN }}
          working_directory: "txtx-supervisor-ui"

      - name: Build Supervisor UI
        run: |
          cd txtx-supervisor-ui
          npm run i
          npm run build
          cd ..

      - name: Install Rust toolchain
        run: |
          rustup toolchain install 1.79 --profile minimal --target wasm32-unknown-unknown
          rustup target add wasm32-unknown-unknown
          echo "RUST_VERSION_HASH=$(rustc --version | sha256sum | awk '{print $1}')" >> $GITHUB_ENV

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            ./target/wasm32-unknown-unknown/release/
          key: ${{ runner.os }}-rust-${{ env.RUST_VERSION_HASH }}-cargo-${{ hashFiles('./Cargo.lock', './crates/txtx-cli/build.rs', 'addons/evm/src/contracts/**') }}

      - name: Build Project
        run: cargo build --manifest-path ./txtx/Cargo.toml --workspace --exclude txtx-addon-network-stacks --release

      - name: Run Tests
        run: cargo test --manifest-path ./txtx/Cargo.toml --workspace --exclude txtx-addon-network-stacks
