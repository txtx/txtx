name: CI
on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  dist_txtx:
    name: Build Txtx Distributions
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            platform: linux
            target: x86_64-unknown-linux-gnu
            architecture: x64
            libc: glibc
          # - os: windows-latest
          #   platform: windows
          #   target: x86_64-pc-windows-msvc
          #   architecture: x64
          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
            architecture: x64
          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
            architecture: arm64

    steps:
      - name: Configure git to use LF (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: txtx

      - name: Checkout Web UI
        uses: actions/checkout@v4
        with:
          repository: txtx/txtx-web-ui
          token: ${{ secrets.TXTX_ACCESS_TOKEN }} 
          path: txtx-web-ui 

      - name: Build Web UI
        run: |
          cd txtx-web-ui
          npm i
          npm run build
          cd ..

      - name: List Directories
        run: |
          pwd
          ls txtx
          ls txtx-web-ui

      - name: Install Rust toolchain
        run: rustup toolchain install stable --profile minimal --target ${{ matrix.target }}

      - name: Install Rust Target
        run: rustup target add ${{ matrix.target }}
      
      - name: List rust targets
        run: rustup target list

      - name: "Get Rust version (unix)"
        if: matrix.os != 'windows-latest'
        run: echo "RUST_VERSION_HASH=$(rustc --version | shasum -a 256 | awk '{print $1}')" >> $GITHUB_ENV

      - name: "Get Rust version (windows)"
        if: matrix.os == 'windows-latest'
        shell: bash
        run: echo "RUST_VERSION_HASH=$(rustc --version | sha256sum | awk '{print $1}')" >> $GITHUB_ENV

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            ./target/${{ matrix.target }}/release/
          key: ${{ runner.os }}-rust-${{ env.RUST_VERSION_HASH }}-cargo-${{ hashFiles('./Cargo.lock') }}

      # Set environment variables required from cross compiling from macos-x86_64 to macos-arm64
      - name: Configure macos-arm64 cross compile config
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Configure artifact names (libc)
        if: ${{ matrix.libc }}
        shell: bash
        run: |
          echo "SHORT_TARGET_NAME=${{ matrix.platform }}-${{ matrix.architecture }}-${{ matrix.libc }}" >> $GITHUB_ENV
          echo "PRE_GYP_TARGET_NAME=${{ matrix.platform }}-${{ matrix.architecture }}-${{ matrix.libc }}" >> $GITHUB_ENV

      - name: Configure artifact names (not libc)
        if: ${{ ! matrix.libc }}
        shell: bash
        run: |
          echo "SHORT_TARGET_NAME=${{ matrix.platform }}-${{ matrix.architecture }}" >> $GITHUB_ENV
          echo "PRE_GYP_TARGET_NAME=${{ matrix.platform }}-${{ matrix.architecture }}-unknown" >> $GITHUB_ENV

      - name: Build - Cargo
        if: matrix.target != 'x86_64-unknown-linux-musl'
        run: 
          cargo build --manifest-path ./txtx/Cargo.toml --release --locked --target ${{ matrix.target }}
        
      # Don't compress for Windows because winget can't yet unzip files
      - name: Compress cargo artifact (Linux)
        if: matrix.os != 'windows-latest'
        run: tar -C txtx/target/${{ matrix.target }}/release -zcvf txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz txtx

      - name: Compress cargo artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd txtx
          7z a ../txtx-${{ env.SHORT_TARGET_NAME }}.zip target/${{ matrix.target }}/release/txtx

      # Separate uploads to prevent paths from being preserved
      - name: Upload cargo artifacts (Linux)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: txtx-${{ env.SHORT_TARGET_NAME }}
          path: txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz

      - name: Upload cargo artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: txtx-${{ env.SHORT_TARGET_NAME }}
          path: txtx-${{ env.SHORT_TARGET_NAME }}.msi

      - name: Upload to S3 (Linux)
        if: matrix.os != 'windows-latest'
        uses: hkusu/s3-upload-action@v2
        id: upload_linux
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-2'
          aws-bucket: txtx-public
          file-path: txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz
          output-file-url: 'true' 
          destination-dir: /releases
          bucket-root: /
          public: true
      - name: Show URL (Linux)
        if: matrix.os != 'windows-latest'
        run: echo '${{ steps.upload_linux.outputs.file-url }}' 

      - name: Upload to S3 (Windows)
        if: matrix.os == 'windows-latest'
        uses: hkusu/s3-upload-action@v2
        id: upload_windows
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-2'
          aws-bucket: txtx-public
          file-path: txtx-${{ env.SHORT_TARGET_NAME }}.msi
          output-file-url: 'true' 
          destination-dir: /releases
          bucket-root: /
          public: true
      - name: Show URL (Windows)
        if: matrix.os == 'windows-latest'
        run: echo '${{ steps.upload_windows.outputs.file-url }}'
