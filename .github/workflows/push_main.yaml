name: Build Binaries
on:
  push:
    branches:
      - main
      - improve-ci
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  get_release_info:
    name: Get Release Info
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.new_release_tag.outputs.TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest release
        if: startsWith(github.ref, 'refs/heads/main')
        id: release
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft

      - name: Determine if release build
        if: startsWith(github.ref, 'refs/heads/main')
        id: new_release_tag
        env:
          LATEST_RELEASE: ${{ steps.release.outputs.release }}
        run: |
          CARGO_VERSION=v$(grep "version" Cargo.toml | head -n 1 | cut -d\" -f2)
          if [[ "${CARGO_VERSION}" != "${LATEST_RELEASE}" ]]; then
            echo "::set-output name=TAG::${CARGO_VERSION}"
            echo "::warning::Will create release for version: ${CARGO_VERSION}"
          else
            echo "::warning::Will not create a release"
          fi

  dist_txtx:
    name: Build Txtx Distributions
    runs-on: ${{ matrix.os }}
    outputs:
      LINUX_X64_SHA: ${{ steps.linux_x64_sha.outputs.LINUX_X64_SHA }}
      MACOS_X64_SHA: ${{ steps.macos_x64_sha.outputs.MACOS_X64_SHA }}
      MACOS_ARM64_SHA: ${{ steps.macos_arm64_sha.outputs.MACOS_ARM64_SHA }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            platform: linux
            target: x86_64-unknown-linux-musl
            architecture: x64
          # - os: windows-latest
          #   platform: windows
          #   target: x86_64-pc-windows-msvc
          #   architecture: x64
          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
            architecture: x64
          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
            architecture: arm64

    steps:

      # pre-build for windows
      - name: Configure git to use LF (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      # pre-build for all OX
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: txtx
          
      - name: Build .env file
        run: |
          touch .env
          echo RELAYER_BASE_URL="https://txtx.link" >> .env
          echo RELAYER_HOST="txtx.link" >> .env
          echo INFURA_API_KEY=${{ secrets.INFURA_API_KEY }} >> .env
          cat .env

      - name: Checkout Web UI
        uses: actions/checkout@v4
        with:
          repository: txtx/txtx-web-ui
          token: ${{ secrets.TXTX_ACCESS_TOKEN }} 
          path: txtx-web-ui 

      - name: Build .env file for Web UI
        run: |
          cd txtx-web-ui
          touch .env
          echo HANKO_API_URL=${{ secrets.HANKO_API_URL }} >> .env
          cat .env
          cd ..

      - name: Build Web UI
        run: |
          cd txtx-web-ui
          npm i
          npm run build
          cd ..

      # build for linux-musl
      - name: Build-musl
        if: matrix.os == 'ubuntu-20.04'
        uses: gmiam/rust-musl-action@master
        with:
          args: cargo build --manifest-path ./txtx/Cargo.toml --target ${{ matrix.target }} --release --features web_ui


      # set up rust for non linux-musl
      - name: Install Rust toolchain
        if: matrix.os != 'ubuntu-20.04'
        run: rustup toolchain install 1.79 --profile minimal --target ${{ matrix.target }}

      - name: Install Rust Target
        if: matrix.os != 'ubuntu-20.04'
        run: rustup target add ${{ matrix.target }}

      # env vars darwin
      - name: "Get Rust version (darwin)"
        if: matrix.os != 'windows-latest' && matrix.ox != 'ubuntu-20.04'
        run: echo "RUST_VERSION_HASH=$(rustc --version | shasum -a 256 | awk '{print $1}')" >> $GITHUB_ENV

      # env vars windows
      - name: "Get Rust version (windows)"
        if: matrix.os == 'windows-latest'
        shell: bash
        run: echo "RUST_VERSION_HASH=$(rustc --version | sha256sum | awk '{print $1}')" >> $GITHUB_ENV

      - name: Cache cargo
        if: matrix.os != 'ubuntu-20.04'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            ./target/${{ matrix.target }}/release/
          key: ${{ runner.os }}-rust-${{ env.RUST_VERSION_HASH }}-cargo-${{ hashFiles('./Cargo.lock') }}

      # Set environment variables required from cross compiling from macos-x86_64 to macos-arm64
      - name: Configure macos-arm64 cross compile config
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Configure artifact names
        shell: bash
        run: |
          echo "SHORT_TARGET_NAME=${{ matrix.platform }}-${{ matrix.architecture }}" >> $GITHUB_ENV
          echo "PRE_GYP_TARGET_NAME=${{ matrix.platform }}-${{ matrix.architecture }}-unknown" >> $GITHUB_ENV
        
      - name: Build - Cargo (not linux-musl)
        if: matrix.os != 'ubuntu-20.04'
        run: 
          cargo build --manifest-path ./txtx/Cargo.toml --release --locked --target ${{ matrix.target }} --features web_ui

      # Don't compress for Windows because winget can't yet unzip files
      - name: Compress cargo artifact (not windows)
        if: matrix.os != 'windows-latest'
        run: tar -C txtx/target/${{ matrix.target }}/release -zcvf txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz txtx

      - name: Store SHA256 Hash of Tar (Linux x64)
        if: matrix.os == 'ubuntu-20.04'
        id: linux_x64_sha
        run: |
          echo "LINUX_X64_SHA=$(sha256sum txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz | awk '{ print $1 }')" >> "$GITHUB_OUTPUT"

      - name: Store SHA256 Hash of Tar (Mac x64)
        if: matrix.os == 'macos-latest' && matrix.architecture == 'x64'
        id: macos_x64_sha
        run: |
          echo "MACOS_X64_SHA=$(shasum -a 256 txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz | awk '{ print $1 }')" >> "$GITHUB_OUTPUT"
          
      - name: Store SHA256 Hash of Tar (Mac arm64)
        if: matrix.os == 'macos-latest' && matrix.architecture == 'arm64'
        id: macos_arm64_sha
        run: |
          echo "MACOS_ARM64_SHA=$(shasum -a 256 txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz | awk '{ print $1 }')" >> "$GITHUB_OUTPUT"

      # Separate uploads to prevent paths from being preserved
      - name: Upload cargo artifacts (not windows)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: txtx-${{ env.SHORT_TARGET_NAME }}
          path: txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz

      - name: Upload to S3 (not windows)
        if: matrix.os != 'windows-latest'
        uses: hkusu/s3-upload-action@v2
        id: upload_linux
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-2'
          aws-bucket: txtx-public
          file-path: txtx-${{ env.SHORT_TARGET_NAME }}.tar.gz
          output-file-url: 'true' 
          destination-dir: /releases
          bucket-root: /
          public: true
      - name: Show URL (Linux)
        if: matrix.os != 'windows-latest'
        run: echo '${{ steps.upload_linux.outputs.file-url }}' 

      - name: Upload to S3 (Windows)
        if: matrix.os == 'windows-latest'
        uses: hkusu/s3-upload-action@v2
        id: upload_windows
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-2'
          aws-bucket: txtx-public
          file-path: txtx-${{ env.SHORT_TARGET_NAME }}.msi
          output-file-url: 'true' 
          destination-dir: /releases
          bucket-root: /
          public: true
      - name: Show URL (Windows)
        if: matrix.os == 'windows-latest'
        run: echo '${{ steps.upload_windows.outputs.file-url }}'

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/main') && needs.get_release_info.outputs.tag != ''
    needs:
      - dist_txtx
      - get_release_info
    permissions:
      actions: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download pre-built dists
        uses: actions/download-artifact@v3

      - name: Tag and Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "**/*.tar.gz,**/*.msi"
          tag: ${{ needs.get_release_info.outputs.tag }}
          commit: ${{ env.GITHUB_SHA }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone the tap repository
        run: |
          git clone https://github.com/txtx/homebrew-txtx.git
          cd homebrew-txtx

      - name: Update the formula with new version and SHA256 values
        run: |
          cd homebrew-txtx
          # Define the new version
          NEW_VERSION="${{ needs.get_release_info.outputs.tag }}"
          
          # Update the version in all url fields, matching on any valid semver version
          sed -i.bak "s/v[0-9]\+\.[0-9]\+\.[0-9]\+\(-[a-zA-Z0-9\.-]\+\)\?\(\+[a-zA-Z0-9\.-]\+\)\?/$(echo $NEW_VERSION)/g" Formula/txtx.rb

          # Update macOS x64 SHA256
          sed -i.bak '/# sha for macos_x64/!b;n;c\            sha256 "'${{ needs.dist_txtx.outputs.MACOS_X64_SHA }}'"' Formula/txtx.rb
          # Update macOS arm64 SHA256
          sed -i.bak '/# sha for macos_arm64/!b;n;c\            sha256 "'${{ needs.dist_txtx.outputs.MACOS_ARM64_SHA }}'"' Formula/txtx.rb
          # Update Linux x64 SHA256
          sed -i.bak '/# sha for linux_x64/!b;n;c\            sha256 "'${{ needs.dist_txtx.outputs.LINUX_X64_SHA }}'"' Formula/txtx.rb
          # Uncomment and update Linux ARM SHA256 when needed
          # sed -i.bak '/# sha for linux_arm64/!b;n;c\            sha256 "'$SHA256_LINUX_ARM'"' Formula/txtx.rb

          # Remove backup file
          rm Formula/txtx.rb.bak

      - name: Commit and push changes
        run: |
          cd homebrew-txtx
          git add Formula/txtx.rb
          git commit -m "Update to version ${{ needs.get_release_info.outputs.tag }}"
          git push https://txtx:${{ secrets.TXTX_ACCESS_TOKEN }}@github.com/txtx/homebrew-txtx.git