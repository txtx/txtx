action "defaults" "stacks::set_default_network" {
    network_id = env.stacks_network_id
    stacks_api_url = env.stacks_api_url
}

wallet "alice" "stacks::connect" {
    expected_address = "SP19F0S4GN8CJQ4K9PKWRBVE00G2C86QTPTRXZ7GP"
}

input "price_id" {
    description = "Price ID to retrieve"
    value = "ec7a775f46379b5e943c3526b1c8d54cd49749176b0b98e02dde68d1bd335c17"
}

action "fetch_price" "std::send_http_request" {
    description = "Retrieve latest prices from Hermes Prices API"
    url = "${env.pyth_hermes_api_url}/api/latest_price_feeds?ids[]=${input.price_id}&binary=true"
}

action "fetch_execution_plan" "std::send_http_request" {
    description = "Retrieve latest execution plan"
    method = "POST"
    request_headers = {
      "Content-Type": "application/json"
    }
    url = "${env.stacks_api_url}/v2/contracts/call-read/${env.pyth_deployer_address}/pyth-governance-v1/get-current-execution-plan"
    request_body = "{ \"arguments\": [], \"sender\": \"SP19F0S4GN8CJQ4K9PKWRBVE00G2C86QTPTRXZ7GP\" }"
}

action "update_price_feed" "stacks::send_contract_call" {
  description = "Encodes the contract call, prompts the user to sign, and broadcasts the update-price-feed function."
  contract_id = "${env.pyth_deployer_address}.pyth-oracle-v2"
  function_name = "verify-and-update-price"
  function_args = [
    // encode_buffer(base64_decode(index(jq(action.fetch_price.response_body, ".[0].vaa"), 0))),
    // index(jq(action.fetch_execution_plan.response_body, ".result"), 0),
  ]
  wallet = wallet.alice
}
