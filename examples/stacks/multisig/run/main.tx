action "defaults" "stacks::set_default_network" {
  network_id = "testnet"
  rpc_api_url = "https://api.testnet.hiro.so"
}

wallet "alice" "stacks::connect" {
  expected_address = "ST2JHG361ZXG51QTKY2NQCVBPPRRE2KZB1HR05NNC"
}

wallet "bob" "stacks::connect" {
  expected_address = "ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND"
}

wallet "alice_and_bob" "stacks::multisig" {
  signers = [wallet.alice, wallet.bob]
}

action "get_name_price" "stacks::call_readonly_fn" {
  description = "Preorder name"
  contract_id = "ST000000000000000000002AMW42H.bns"
  function_name = "get-name-price"
  function_args = [
      stacks::cv_buff(encode_hex(input.namespace)),
      stacks::cv_buff(encode_hex(input.name))
  ]
  sender = "ST2JHG361ZXG51QTKY2NQCVBPPRRE2KZB1HR05NNC"
}

action "send_name_preorder" "stacks::send_contract_call" {
  description = "Send Preorder ${input.name}.${input.namespace} transaction"
  contract_id = "ST000000000000000000002AMW42H.bns"
  function_name = "name-preorder"
  function_args = [
      stacks::cv_buff(
        ripemd160(sha256(
          [
            encode_hex("${input.name}.${input.namespace}"),
            encode_hex(input.salt)
          ]
        ))
      ),
      stacks::cv_uint(action.get_name_price.value), 
  ]
  signer = wallet.alice_and_bob
  confirmations = 1
}

action "send_name_regiser" "stacks::send_contract_call" {
  description = "Register name"
  contract_id = "ST000000000000000000002AMW42H.bns"
  function_name = "name-register"
  function_args = [
      stacks::cv_buff(encode_hex(input.namespace)),
      stacks::cv_buff(encode_hex(input.name)),
      stacks::cv_buff(encode_hex(input.salt)),
      stacks::cv_buff(encode_hex(input.zonefile)),
  ]
  signer = wallet.alice_and_bob
  confirmations = 1
  depends_on = [action.send_name_preorder.tx_id]
}
