action "default" "stacks::set_default_network" {
  network_id = "testnet"
  rpc_api_url = "https://api.testnet.hiro.so"
}

wallet "alice" "stacks::connect" {
  expected_address = "ST2JHG361ZXG51QTKY2NQCVBPPRRE2KZB1HR05NNC"
  // cycle puppy glare enroll cost improve round trend wrist mushroom scorpion tower claim oppose clever elephant dinosaur eight problem before frozen dune wagon high
  // 02c4b5eacb71a27be633ed970dcbc41c00440364bc04ba38ae4683ac24e708bf33
}

wallet "bob" "stacks::connect" {
  expected_address = "ST2NEB84ASENDXKYGJPQW86YXQCEFEX2ZQPG87ND"
  // board list obtain sugar hour worth raven scout denial thunder horse logic fury scorpion fold genuine phrase wealth news aim below celery when cabin
  // 03b3e0a76b292b2c83fc0ac14ae6160d0438ebe94e14bbb5b7755153628886e08e
}

wallet "alice_and_bob" "stacks::multisig" {
  signers = [wallet.alice, wallet.bob]
}

input "namespace" {
  description = "TLD / Namespace"
  default = "btc"
}

input "name" {
  description = "Domain name to order"
  default = "ludovic"
}

input "salt" {
  description = "Random salt to use for preventing front-running"
  default = "00000000000000"
}

input "zonefile" {
  description = "Zonefile to attach to the new domain"
  default = "0000000000"
}

action "get_name_price" "stacks::call_readonly_fn" {
  description = "Preorder name"
  contract_id = "ST000000000000000000002AMW42H.bns"
  function_name = "get-name-price"
  function_args = [
      stacks::cv_buff(encode_hex(input.namespace)),
      stacks::cv_buff(encode_hex(input.name))
  ]
  sender = "ST2JHG361ZXG51QTKY2NQCVBPPRRE2KZB1HR05NNC"
}

action "send_name_preorder" "stacks::send_contract_call" {
  description = "Send Preorder ${input.name}.${input.namespace} transaction"
  contract_id = "ST000000000000000000002AMW42H.bns"
  function_name = "name-preorder"
  function_args = [
      stacks::cv_buff(
        ripemd160(sha256(
          [
            encode_hex("${input.name}.${input.namespace}"),
            encode_hex(input.salt)
          ]
        ))
      ),
      stacks::cv_uint(action.get_name_price.value), 
  ]
  signer = wallet.alice_and_bob
  confirmations = 1
}

output "encoded_salt" {
  value = stacks::cv_buff(encode_hex(input.salt))
}
