addon "evm" {
    chain_id = input.chain_id
    rpc_api_url = input.rpc_api_url
}

variable "my_var" {
    value = 10 // publishing literals
}
variable "another" {
    value = input.data // not publishing dynamic values
}

action "get_stuff" "std::http" {
    url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"
    method = "GET"
}

action "deploy" "evm::deploy_contract" {
    contract = evm::get_contract_from_foundry_project("usdc") 
    signer = signer.deployer
    nonce = 10
}

// State: contract, nonce, my_var
// InputSpec: chain_id, rpc_api_url, signer.deployer, data

---

addon "evm" {
    chain_id = input.chain_id
    rpc_api_url = input.rpc_api_url
}

action "deploy" "evm::deploy_contract" {
    contract = evm::get_contract_from_foundry_project("usdc") 
    signer = signer.deployer   
    block_explorer_api_key = "hardcoded" // not included cause sensitive
}

// State: contract
// InputSpec: chain_id, rpc_api_url, signer.deployer

---

addon "evm" {
    chain_id = input.chain_id
    rpc_api_url = input.rpc_api_url
}

action "deploy" "evm::deploy_contract" {
    contract = evm::get_contract_from_foundry_project("usdc") 
    signer = signer.deployer   
    block_explorer_api_key = "hardcoded" // not included cause sensitive
    nonce = input.nonce
}

// State: contract
// InputSpec: chain_id, rpc_api_url, signer.deployer, nonce

---



// Algo
txtemplate.json
- Fetch remote runbook
    - 



signer.deployer

runbook "runbook2" {
    inputs {
        deployer = signer.deployer
    }
}

txtemplate.json

/// Observations
signers are passed in as an input. 
    an embeddable runbook likely should not define signers.
an embeddable runbook should not define flows.
