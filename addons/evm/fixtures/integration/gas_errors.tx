# Gas exhaustion and limit error test fixture
addon "evm" {
    chain_id = input.chain_id
    rpc_api_url = input.rpc_url
}

signer "test_signer" "evm::private_key" {
    private_key = input.private_key
}

# Test parameters
variable "recipient" {
    value = input.recipient
    description = "Recipient address"
}

variable "amount" {
    value = input.amount
    description = "Amount to send"
}

variable "contract_bytecode" {
    value = input.contract_bytecode
    description = "Contract bytecode to deploy"
}

# Test insufficient gas for transfer
action "send_with_low_gas" "evm::send_transaction" {
    from = signer.test_signer
    to = variable.recipient
    value = variable.amount
    gas_limit = "1000"  # Too low for transfer (needs 21000)
    catch_error = true
}

# Test gas limit exceeded
action "send_with_exact_gas" "evm::send_transaction" {
    from = signer.test_signer
    to = variable.recipient
    value = "1000000000000000"
    gas_limit = "21000"  # Exact minimum
}

# Test intrinsic gas too low
action "deploy_with_low_gas" "evm::deploy_contract" {
    from = signer.test_signer
    bytecode = variable.contract_bytecode
    gas_limit = "10000"  # Too low for deployment
    catch_error = true
}

# Test gas price too high for balance
action "send_with_high_gas_price" "evm::send_transaction" {
    from = signer.test_signer
    to = variable.recipient
    value = "1000000000000000"
    gas_price = "999999999999999999"  # Extremely high
    gas_limit = "21000"
    catch_error = true
}

# Test block gas limit
action "send_huge_data" "evm::send_transaction" {
    from = signer.test_signer
    to = variable.recipient
    value = "0"
    data = input.huge_data  # Very large data payload
    catch_error = true
}

# Test gas estimation failure
action "estimate_impossible_tx" "evm::estimate_gas" {
    from = signer.test_signer.address
    to = "0x0000000000000000000000000000000000000001"  # Precompile
    data = "0xdeadbeef"  # Invalid precompile input
    catch_error = true
}

# Outputs
output "low_gas_error" {
    value = action.send_with_low_gas.error
}

output "exact_gas_success" {
    value = action.send_with_exact_gas.tx_hash
}

output "deployment_gas_error" {
    value = action.deploy_with_low_gas.error
}

output "high_gas_price_error" {
    value = action.send_with_high_gas_price.error
}

output "block_limit_error" {
    value = action.send_huge_data.error
}

output "estimation_error" {
    value = action.estimate_impossible_tx.error
}