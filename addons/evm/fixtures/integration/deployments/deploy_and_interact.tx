addon "evm" {
    chain_id = input.chain_id
    rpc_api_url = input.rpc_url
}

signer "deployer" "evm::secret_key" {
    secret_key = input.deployer_private_key
}

# Counter contract
variable "counter_contract" {
    value = {
        bytecode = "0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80636d4ce63c146041578063371303c014604b578063b3bcfa8214605a575b600080fd5b60476064565b60405190815260200160405180910390f35b60526086565b604051908152602001f35b60526090565b60008054905090565b6000805490819055905090565b600080549081905560019055905600a165627a7a72305820"
        abi = evm::json_encode([
            {
                "name": "get",
                "type": "function",
                "inputs": [],
                "outputs": [{"name": "", "type": "uint256"}],
                "stateMutability": "view"
            },
            {
                "name": "increment",
                "type": "function",
                "inputs": [],
                "outputs": [],
                "stateMutability": "nonpayable"
            },
            {
                "name": "reset",
                "type": "function", 
                "inputs": [],
                "outputs": [],
                "stateMutability": "nonpayable"
            }
        ])
    }
}

action "deploy_counter" "evm::deploy_contract" {
    contract = variable.counter_contract
    signer = signer.deployer
    confirmations = 0
}

# Get initial value (should be 0)
action "get_initial" "evm::call_contract" {
    contract_address = action.deploy_counter.contract_address
    contract_abi = variable.counter_contract.abi
    function_name = "get"
    function_args = []
    signer = signer.deployer
    confirmations = 0
}

# Increment the counter
action "increment" "evm::call_contract" {
    contract_address = action.deploy_counter.contract_address
    contract_abi = variable.counter_contract.abi
    function_name = "increment"
    function_args = []
    signer = signer.deployer
    confirmations = 1
}

# Get value after increment (should be 1)
action "get_after_increment" "evm::call_contract" {
    contract_address = action.deploy_counter.contract_address
    contract_abi = variable.counter_contract.abi
    function_name = "get"
    function_args = []
    signer = signer.deployer
    confirmations = 0
}

output "initial_value" {
    value = action.get_initial.result
}

output "incremented_value" {
    value = action.get_after_increment.result
}