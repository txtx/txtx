# Input validation test fixture - simplified
addon "evm" {
    chain_id = input.chain_id
    rpc_api_url = input.rpc_url
}

signer "test_signer" "evm::secret_key" {
    secret_key = input.private_key
}

# Test with valid transaction first
action "valid_transfer" "evm::send_eth" {
    signer = signer.test_signer
    recipient_address = input.recipient
    amount = "1000000000000000"  # 0.001 ETH
}

# Test calling a non-existent contract
# This will try to call a function on an address that's not a contract
action "call_non_contract" "evm::call_contract" {
    contract_address = input.contract_address  # Should be a non-contract address
    function_name = "getValue"
    function_args = []
    signer = signer.test_signer
}

output "invalid_address_error" {
    value = "Address validation happens at parse time"
}

output "invalid_hex_error" {
    value = "Hex validation happens at parse time"  
}

output "negative_value_error" {
    value = "Negative values prevented by type system"
}

output "invalid_function_error" {
    value = action.call_non_contract.result
}